 // Update Bio
  Future<bool> updateBio({
    required String firstName,
    required String lastName,
    required String birthDate,
    required String gender,
    required String phone,
    required String address,
    required String province,
    required String regencies,
    required String image,
    required String institutionName,
    required String pupils,
    required String field,
    required String proof,
  }) async {
    String? token = await tokenManager.getToken();
    String? bioDateId = await biodateIdManager.getBiodateId();
    try {
      var formData = FormData.fromMap({
        "firstName": firstName,
        "lastName": lastName,
        "birthDate": birthDate,
        "gender": gender,
        "phone": phone,
        "address": address,
        "province": province,
        "regencies": regencies,
        "image": await MultipartFile.fromFile(image),
        "institutionName": institutionName,
        "field": field,
        "pupils": pupils,
        "proof": await MultipartFile.fromFile(proof),
      });

      var response = await Dio().put(
        "http://192.168.1.5:3000/user/update-biodate?id=$bioDateId",
        data: formData,
        options: Options(
          headers: {
            "Content-Type": "multipart/form-data",
            "Authorization": "Bearer $token"
          },
        ),
      );

      if (response.statusCode == 200) {
        // Registration successful
        return true;
      } else {
        throw Exception('Failed to Update Bio : ${response.data['message']}');
      }
    } on DioException catch (e) {
      if (e.response?.statusCode == 400) {
        debugPrint('Error 400: ${e.response?.data}');
        throw Exception('Update Bio failed: ${e.response?.data['message']}');
      } else {
        debugPrint('Error: ${e.toString()}');
        throw Exception('Failed to Update Bio');
      }
    }
  }
